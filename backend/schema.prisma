// schema.prisma
generator client {
  output   = "./modules/prisma_client"
  provider = "prisma-client-js"
}

datasource db {
  provider = "mysql"
  url      = env("EVENTHIVE_SQL_CONNECTIONURI") // mysql://user:pass@localhost:3306/dbname
}

model PhoneNumber {
  phone_id          Int       @id @default(autoincrement())
  number            String
  is_verified       Boolean   @default(false)
  verified_at       DateTime?
  verification_code String?
  User              User[]
}

model EmailAddress {
  email_id          Int       @id @default(autoincrement())
  email             String
  is_verified       Boolean   @default(false)
  verification_code String?
  verified_at       DateTime?
  User              User[]
}

model User {
  user_id                 Int                  @id @default(autoincrement())
  user_name               String               @unique
  first_name              String               @unique
  last_name               String               @unique
  address                 String               @unique
  notification_preference String
  password                String
  phone_id                Int
  email_id                Int
  role                    String               @default("VISITOR") // VISITOR, EVENT_OWNER, ADMIN
  is_active               Boolean              @default(false)
  is_verified             Boolean              @default(false)
  PasswordResetToken      PasswordResetToken[]
  Notification            Notification[]
  Commentary              Commentary[]
  Event                   Event[]
  Verification            Verification[]
  phone                   PhoneNumber          @relation(fields: [phone_id], references: [phone_id])
  email_address           EmailAddress         @relation(fields: [email_id], references: [email_id])
}

model PasswordResetToken {
  preset_token_id Int    @id @default(autoincrement())
  token           String @unique
  user_id         Int    @unique
  createdAt       Int
  user            User   @relation(fields: [user_id], references: [user_id])
}

model Notification {
  notification_id     Int     @id @default(autoincrement())
  content             String?
  notification_status String?
  user_id             Int?
  user                User?   @relation(fields: [user_id], references: [user_id])
}

model Verification {
  verification_id     Int     @id @default(autoincrement())
  verification_notes  String?
  verification_status String? // VERIFIED, PENDING, REJECTED
  face_image_link     String?
  nicback_image_link  String?
  nicfront_image_link String?
  owner_id            Int?
  user                User?   @relation(fields: [owner_id], references: [user_id])
}

model Commentary {
  commentary_id Int     @id @default(autoincrement())
  user_id       Int?
  event_id      Int?
  comment       String?
  rating        String?
  user          User?   @relation(fields: [user_id], references: [user_id])
  event         Event?  @relation(fields: [event_id], references: [event_id])
}

model Event {
  event_id          Int          @id @default(autoincrement())
  event_name        String?
  date              DateTime?
  time              DateTime?
  event_description String?
  venue             String?
  image             String?
  ticket_prices     Int?
  event_category    String?
  location          String?
  user_id           Int?
  user              User?        @relation(fields: [user_id], references: [user_id])
  Commentary        Commentary[]
}
